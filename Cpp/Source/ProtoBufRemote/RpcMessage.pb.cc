// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RpcMessage.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBufRemote {

namespace {

const ::google::protobuf::Descriptor* RpcMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcMessage_Call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcMessage_Call_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcMessage_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcMessage_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcMessage_Parameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcMessage_Parameter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RpcMessage_2eproto() {
  protobuf_AddDesc_RpcMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RpcMessage.proto");
  GOOGLE_CHECK(file != NULL);
  RpcMessage_descriptor_ = file->message_type(0);
  static const int RpcMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, call_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, result_message_),
  };
  RpcMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcMessage_descriptor_,
      RpcMessage::default_instance_,
      RpcMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcMessage));
  RpcMessage_Call_descriptor_ = RpcMessage_descriptor_->nested_type(0);
  static const int RpcMessage_Call_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Call, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Call, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Call, parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Call, expects_result_),
  };
  RpcMessage_Call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcMessage_Call_descriptor_,
      RpcMessage_Call::default_instance_,
      RpcMessage_Call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcMessage_Call));
  RpcMessage_Result_descriptor_ = RpcMessage_descriptor_->nested_type(1);
  static const int RpcMessage_Result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Result, is_failed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Result, error_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Result, call_result_),
  };
  RpcMessage_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcMessage_Result_descriptor_,
      RpcMessage_Result::default_instance_,
      RpcMessage_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcMessage_Result));
  RpcMessage_Parameter_descriptor_ = RpcMessage_descriptor_->nested_type(2);
  static const int RpcMessage_Parameter_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Parameter, proto_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Parameter, string_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Parameter, int_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Parameter, uint_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Parameter, int64_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Parameter, uint64_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Parameter, bool_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Parameter, float_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Parameter, double_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Parameter, is_null_),
  };
  RpcMessage_Parameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcMessage_Parameter_descriptor_,
      RpcMessage_Parameter::default_instance_,
      RpcMessage_Parameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Parameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMessage_Parameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcMessage_Parameter));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RpcMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcMessage_descriptor_, &RpcMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcMessage_Call_descriptor_, &RpcMessage_Call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcMessage_Result_descriptor_, &RpcMessage_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcMessage_Parameter_descriptor_, &RpcMessage_Parameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RpcMessage_2eproto() {
  delete RpcMessage::default_instance_;
  delete RpcMessage_reflection_;
  delete RpcMessage_Call::default_instance_;
  delete RpcMessage_Call_reflection_;
  delete RpcMessage_Result::default_instance_;
  delete RpcMessage_Result_reflection_;
  delete RpcMessage_Parameter::default_instance_;
  delete RpcMessage_Parameter_reflection_;
}

void protobuf_AddDesc_RpcMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020RpcMessage.proto\022\016ProtoBufRemote\"\317\004\n\nR"
    "pcMessage\022\n\n\002id\030\001 \002(\005\0225\n\014call_message\030\002 "
    "\001(\0132\037.ProtoBufRemote.RpcMessage.Call\0229\n\016"
    "result_message\030\003 \001(\0132!.ProtoBufRemote.Rp"
    "cMessage.Result\032y\n\004Call\022\017\n\007service\030\001 \002(\t"
    "\022\016\n\006method\030\002 \002(\t\0228\n\nparameters\030\003 \003(\0132$.P"
    "rotoBufRemote.RpcMessage.Parameter\022\026\n\016ex"
    "pects_result\030\004 \002(\010\032m\n\006Result\022\021\n\tis_faile"
    "d\030\001 \001(\010\022\025\n\rerror_message\030\002 \001(\t\0229\n\013call_r"
    "esult\030\003 \001(\0132$.ProtoBufRemote.RpcMessage."
    "Parameter\032\330\001\n\tParameter\022\023\n\013proto_param\030\001"
    " \001(\014\022\024\n\014string_param\030\002 \001(\t\022\021\n\tint_param\030"
    "\003 \001(\021\022\022\n\nuint_param\030\004 \001(\r\022\023\n\013int64_param"
    "\030\005 \001(\022\022\024\n\014uint64_param\030\006 \001(\004\022\022\n\nbool_par"
    "am\030\007 \001(\010\022\023\n\013float_param\030\010 \001(\002\022\024\n\014double_"
    "param\030\t \001(\001\022\017\n\007is_null\030\n \001(\010", 628);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RpcMessage.proto", &protobuf_RegisterTypes);
  RpcMessage::default_instance_ = new RpcMessage();
  RpcMessage_Call::default_instance_ = new RpcMessage_Call();
  RpcMessage_Result::default_instance_ = new RpcMessage_Result();
  RpcMessage_Parameter::default_instance_ = new RpcMessage_Parameter();
  RpcMessage::default_instance_->InitAsDefaultInstance();
  RpcMessage_Call::default_instance_->InitAsDefaultInstance();
  RpcMessage_Result::default_instance_->InitAsDefaultInstance();
  RpcMessage_Parameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RpcMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RpcMessage_2eproto {
  StaticDescriptorInitializer_RpcMessage_2eproto() {
    protobuf_AddDesc_RpcMessage_2eproto();
  }
} static_descriptor_initializer_RpcMessage_2eproto_;


// ===================================================================

const ::std::string RpcMessage_Call::_default_service_;
const ::std::string RpcMessage_Call::_default_method_;
#ifndef _MSC_VER
const int RpcMessage_Call::kServiceFieldNumber;
const int RpcMessage_Call::kMethodFieldNumber;
const int RpcMessage_Call::kParametersFieldNumber;
const int RpcMessage_Call::kExpectsResultFieldNumber;
#endif  // !_MSC_VER

RpcMessage_Call::RpcMessage_Call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpcMessage_Call::InitAsDefaultInstance() {
}

RpcMessage_Call::RpcMessage_Call(const RpcMessage_Call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpcMessage_Call::SharedCtor() {
  _cached_size_ = 0;
  service_ = const_cast< ::std::string*>(&_default_service_);
  method_ = const_cast< ::std::string*>(&_default_method_);
  expects_result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcMessage_Call::~RpcMessage_Call() {
  SharedDtor();
}

void RpcMessage_Call::SharedDtor() {
  if (service_ != &_default_service_) {
    delete service_;
  }
  if (method_ != &_default_method_) {
    delete method_;
  }
  if (this != default_instance_) {
  }
}

void RpcMessage_Call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcMessage_Call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcMessage_Call_descriptor_;
}

const RpcMessage_Call& RpcMessage_Call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

RpcMessage_Call* RpcMessage_Call::default_instance_ = NULL;

RpcMessage_Call* RpcMessage_Call::New() const {
  return new RpcMessage_Call;
}

void RpcMessage_Call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (service_ != &_default_service_) {
        service_->clear();
      }
    }
    if (_has_bit(1)) {
      if (method_ != &_default_method_) {
        method_->clear();
      }
    }
    expects_result_ = false;
  }
  parameters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcMessage_Call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_method;
        break;
      }
      
      // required string method = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parameters;
        break;
      }
      
      // repeated .ProtoBufRemote.RpcMessage.Parameter parameters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parameters;
        if (input->ExpectTag(32)) goto parse_expects_result;
        break;
      }
      
      // required bool expects_result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expects_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &expects_result_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcMessage_Call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service(), output);
  }
  
  // required string method = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->method(), output);
  }
  
  // repeated .ProtoBufRemote.RpcMessage.Parameter parameters = 3;
  for (int i = 0; i < this->parameters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parameters(i), output);
  }
  
  // required bool expects_result = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->expects_result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcMessage_Call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service(), target);
  }
  
  // required string method = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method(), target);
  }
  
  // repeated .ProtoBufRemote.RpcMessage.Parameter parameters = 3;
  for (int i = 0; i < this->parameters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parameters(i), target);
  }
  
  // required bool expects_result = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->expects_result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcMessage_Call::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service = 1;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service());
    }
    
    // required string method = 2;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }
    
    // required bool expects_result = 4;
    if (has_expects_result()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .ProtoBufRemote.RpcMessage.Parameter parameters = 3;
  total_size += 1 * this->parameters_size();
  for (int i = 0; i < this->parameters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcMessage_Call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcMessage_Call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcMessage_Call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcMessage_Call::MergeFrom(const RpcMessage_Call& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameters_.MergeFrom(from.parameters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_service(from.service());
    }
    if (from._has_bit(1)) {
      set_method(from.method());
    }
    if (from._has_bit(3)) {
      set_expects_result(from.expects_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcMessage_Call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMessage_Call::CopyFrom(const RpcMessage_Call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMessage_Call::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  return true;
}

void RpcMessage_Call::Swap(RpcMessage_Call* other) {
  if (other != this) {
    std::swap(service_, other->service_);
    std::swap(method_, other->method_);
    parameters_.Swap(&other->parameters_);
    std::swap(expects_result_, other->expects_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcMessage_Call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcMessage_Call_descriptor_;
  metadata.reflection = RpcMessage_Call_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string RpcMessage_Result::_default_error_message_;
#ifndef _MSC_VER
const int RpcMessage_Result::kIsFailedFieldNumber;
const int RpcMessage_Result::kErrorMessageFieldNumber;
const int RpcMessage_Result::kCallResultFieldNumber;
#endif  // !_MSC_VER

RpcMessage_Result::RpcMessage_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpcMessage_Result::InitAsDefaultInstance() {
  call_result_ = const_cast< ::ProtoBufRemote::RpcMessage_Parameter*>(&::ProtoBufRemote::RpcMessage_Parameter::default_instance());
}

RpcMessage_Result::RpcMessage_Result(const RpcMessage_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpcMessage_Result::SharedCtor() {
  _cached_size_ = 0;
  is_failed_ = false;
  error_message_ = const_cast< ::std::string*>(&_default_error_message_);
  call_result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcMessage_Result::~RpcMessage_Result() {
  SharedDtor();
}

void RpcMessage_Result::SharedDtor() {
  if (error_message_ != &_default_error_message_) {
    delete error_message_;
  }
  if (this != default_instance_) {
    delete call_result_;
  }
}

void RpcMessage_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcMessage_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcMessage_Result_descriptor_;
}

const RpcMessage_Result& RpcMessage_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

RpcMessage_Result* RpcMessage_Result::default_instance_ = NULL;

RpcMessage_Result* RpcMessage_Result::New() const {
  return new RpcMessage_Result;
}

void RpcMessage_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_failed_ = false;
    if (_has_bit(1)) {
      if (error_message_ != &_default_error_message_) {
        error_message_->clear();
      }
    }
    if (_has_bit(2)) {
      if (call_result_ != NULL) call_result_->::ProtoBufRemote::RpcMessage_Parameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcMessage_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_failed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_failed_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_message;
        break;
      }
      
      // optional string error_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_call_result;
        break;
      }
      
      // optional .ProtoBufRemote.RpcMessage.Parameter call_result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_call_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcMessage_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_failed = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_failed(), output);
  }
  
  // optional string error_message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_message(), output);
  }
  
  // optional .ProtoBufRemote.RpcMessage.Parameter call_result = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->call_result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcMessage_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_failed = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_failed(), target);
  }
  
  // optional string error_message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }
  
  // optional .ProtoBufRemote.RpcMessage.Parameter call_result = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->call_result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcMessage_Result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_failed = 1;
    if (has_is_failed()) {
      total_size += 1 + 1;
    }
    
    // optional string error_message = 2;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }
    
    // optional .ProtoBufRemote.RpcMessage.Parameter call_result = 3;
    if (has_call_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->call_result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcMessage_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcMessage_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcMessage_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcMessage_Result::MergeFrom(const RpcMessage_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_is_failed(from.is_failed());
    }
    if (from._has_bit(1)) {
      set_error_message(from.error_message());
    }
    if (from._has_bit(2)) {
      mutable_call_result()->::ProtoBufRemote::RpcMessage_Parameter::MergeFrom(from.call_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcMessage_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMessage_Result::CopyFrom(const RpcMessage_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMessage_Result::IsInitialized() const {
  
  return true;
}

void RpcMessage_Result::Swap(RpcMessage_Result* other) {
  if (other != this) {
    std::swap(is_failed_, other->is_failed_);
    std::swap(error_message_, other->error_message_);
    std::swap(call_result_, other->call_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcMessage_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcMessage_Result_descriptor_;
  metadata.reflection = RpcMessage_Result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string RpcMessage_Parameter::_default_proto_param_;
const ::std::string RpcMessage_Parameter::_default_string_param_;
#ifndef _MSC_VER
const int RpcMessage_Parameter::kProtoParamFieldNumber;
const int RpcMessage_Parameter::kStringParamFieldNumber;
const int RpcMessage_Parameter::kIntParamFieldNumber;
const int RpcMessage_Parameter::kUintParamFieldNumber;
const int RpcMessage_Parameter::kInt64ParamFieldNumber;
const int RpcMessage_Parameter::kUint64ParamFieldNumber;
const int RpcMessage_Parameter::kBoolParamFieldNumber;
const int RpcMessage_Parameter::kFloatParamFieldNumber;
const int RpcMessage_Parameter::kDoubleParamFieldNumber;
const int RpcMessage_Parameter::kIsNullFieldNumber;
#endif  // !_MSC_VER

RpcMessage_Parameter::RpcMessage_Parameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpcMessage_Parameter::InitAsDefaultInstance() {
}

RpcMessage_Parameter::RpcMessage_Parameter(const RpcMessage_Parameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpcMessage_Parameter::SharedCtor() {
  _cached_size_ = 0;
  proto_param_ = const_cast< ::std::string*>(&_default_proto_param_);
  string_param_ = const_cast< ::std::string*>(&_default_string_param_);
  int_param_ = 0;
  uint_param_ = 0u;
  int64_param_ = GOOGLE_LONGLONG(0);
  uint64_param_ = GOOGLE_ULONGLONG(0);
  bool_param_ = false;
  float_param_ = 0;
  double_param_ = 0;
  is_null_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcMessage_Parameter::~RpcMessage_Parameter() {
  SharedDtor();
}

void RpcMessage_Parameter::SharedDtor() {
  if (proto_param_ != &_default_proto_param_) {
    delete proto_param_;
  }
  if (string_param_ != &_default_string_param_) {
    delete string_param_;
  }
  if (this != default_instance_) {
  }
}

void RpcMessage_Parameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcMessage_Parameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcMessage_Parameter_descriptor_;
}

const RpcMessage_Parameter& RpcMessage_Parameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

RpcMessage_Parameter* RpcMessage_Parameter::default_instance_ = NULL;

RpcMessage_Parameter* RpcMessage_Parameter::New() const {
  return new RpcMessage_Parameter;
}

void RpcMessage_Parameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (proto_param_ != &_default_proto_param_) {
        proto_param_->clear();
      }
    }
    if (_has_bit(1)) {
      if (string_param_ != &_default_string_param_) {
        string_param_->clear();
      }
    }
    int_param_ = 0;
    uint_param_ = 0u;
    int64_param_ = GOOGLE_LONGLONG(0);
    uint64_param_ = GOOGLE_ULONGLONG(0);
    bool_param_ = false;
    float_param_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    double_param_ = 0;
    is_null_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcMessage_Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes proto_param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proto_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_string_param;
        break;
      }
      
      // optional string string_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_param().data(), this->string_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int_param;
        break;
      }
      
      // optional sint32 int_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &int_param_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uint_param;
        break;
      }
      
      // optional uint32 uint_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint_param_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_int64_param;
        break;
      }
      
      // optional sint64 int64_param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int64_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &int64_param_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uint64_param;
        break;
      }
      
      // optional uint64 uint64_param = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint64_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint64_param_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bool_param;
        break;
      }
      
      // optional bool bool_param = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bool_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_param_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_float_param;
        break;
      }
      
      // optional float float_param = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_float_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_param_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_double_param;
        break;
      }
      
      // optional double double_param = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_double_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_param_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_null;
        break;
      }
      
      // optional bool is_null = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_null_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcMessage_Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes proto_param = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->proto_param(), output);
  }
  
  // optional string string_param = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_param().data(), this->string_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->string_param(), output);
  }
  
  // optional sint32 int_param = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->int_param(), output);
  }
  
  // optional uint32 uint_param = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uint_param(), output);
  }
  
  // optional sint64 int64_param = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->int64_param(), output);
  }
  
  // optional uint64 uint64_param = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->uint64_param(), output);
  }
  
  // optional bool bool_param = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bool_param(), output);
  }
  
  // optional float float_param = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->float_param(), output);
  }
  
  // optional double double_param = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->double_param(), output);
  }
  
  // optional bool is_null = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_null(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcMessage_Parameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes proto_param = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->proto_param(), target);
  }
  
  // optional string string_param = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_param().data(), this->string_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->string_param(), target);
  }
  
  // optional sint32 int_param = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->int_param(), target);
  }
  
  // optional uint32 uint_param = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uint_param(), target);
  }
  
  // optional sint64 int64_param = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->int64_param(), target);
  }
  
  // optional uint64 uint64_param = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->uint64_param(), target);
  }
  
  // optional bool bool_param = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bool_param(), target);
  }
  
  // optional float float_param = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->float_param(), target);
  }
  
  // optional double double_param = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->double_param(), target);
  }
  
  // optional bool is_null = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_null(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcMessage_Parameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes proto_param = 1;
    if (has_proto_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->proto_param());
    }
    
    // optional string string_param = 2;
    if (has_string_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_param());
    }
    
    // optional sint32 int_param = 3;
    if (has_int_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->int_param());
    }
    
    // optional uint32 uint_param = 4;
    if (has_uint_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint_param());
    }
    
    // optional sint64 int64_param = 5;
    if (has_int64_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->int64_param());
    }
    
    // optional uint64 uint64_param = 6;
    if (has_uint64_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64_param());
    }
    
    // optional bool bool_param = 7;
    if (has_bool_param()) {
      total_size += 1 + 1;
    }
    
    // optional float float_param = 8;
    if (has_float_param()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double double_param = 9;
    if (has_double_param()) {
      total_size += 1 + 8;
    }
    
    // optional bool is_null = 10;
    if (has_is_null()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcMessage_Parameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcMessage_Parameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcMessage_Parameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcMessage_Parameter::MergeFrom(const RpcMessage_Parameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_proto_param(from.proto_param());
    }
    if (from._has_bit(1)) {
      set_string_param(from.string_param());
    }
    if (from._has_bit(2)) {
      set_int_param(from.int_param());
    }
    if (from._has_bit(3)) {
      set_uint_param(from.uint_param());
    }
    if (from._has_bit(4)) {
      set_int64_param(from.int64_param());
    }
    if (from._has_bit(5)) {
      set_uint64_param(from.uint64_param());
    }
    if (from._has_bit(6)) {
      set_bool_param(from.bool_param());
    }
    if (from._has_bit(7)) {
      set_float_param(from.float_param());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_double_param(from.double_param());
    }
    if (from._has_bit(9)) {
      set_is_null(from.is_null());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcMessage_Parameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMessage_Parameter::CopyFrom(const RpcMessage_Parameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMessage_Parameter::IsInitialized() const {
  
  return true;
}

void RpcMessage_Parameter::Swap(RpcMessage_Parameter* other) {
  if (other != this) {
    std::swap(proto_param_, other->proto_param_);
    std::swap(string_param_, other->string_param_);
    std::swap(int_param_, other->int_param_);
    std::swap(uint_param_, other->uint_param_);
    std::swap(int64_param_, other->int64_param_);
    std::swap(uint64_param_, other->uint64_param_);
    std::swap(bool_param_, other->bool_param_);
    std::swap(float_param_, other->float_param_);
    std::swap(double_param_, other->double_param_);
    std::swap(is_null_, other->is_null_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcMessage_Parameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcMessage_Parameter_descriptor_;
  metadata.reflection = RpcMessage_Parameter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RpcMessage::kIdFieldNumber;
const int RpcMessage::kCallMessageFieldNumber;
const int RpcMessage::kResultMessageFieldNumber;
#endif  // !_MSC_VER

RpcMessage::RpcMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpcMessage::InitAsDefaultInstance() {
  call_message_ = const_cast< ::ProtoBufRemote::RpcMessage_Call*>(&::ProtoBufRemote::RpcMessage_Call::default_instance());
  result_message_ = const_cast< ::ProtoBufRemote::RpcMessage_Result*>(&::ProtoBufRemote::RpcMessage_Result::default_instance());
}

RpcMessage::RpcMessage(const RpcMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpcMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  call_message_ = NULL;
  result_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcMessage::~RpcMessage() {
  SharedDtor();
}

void RpcMessage::SharedDtor() {
  if (this != default_instance_) {
    delete call_message_;
    delete result_message_;
  }
}

void RpcMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcMessage_descriptor_;
}

const RpcMessage& RpcMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RpcMessage_2eproto();  return *default_instance_;
}

RpcMessage* RpcMessage::default_instance_ = NULL;

RpcMessage* RpcMessage::New() const {
  return new RpcMessage;
}

void RpcMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (_has_bit(1)) {
      if (call_message_ != NULL) call_message_->::ProtoBufRemote::RpcMessage_Call::Clear();
    }
    if (_has_bit(2)) {
      if (result_message_ != NULL) result_message_->::ProtoBufRemote::RpcMessage_Result::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_call_message;
        break;
      }
      
      // optional .ProtoBufRemote.RpcMessage.Call call_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_call_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result_message;
        break;
      }
      
      // optional .ProtoBufRemote.RpcMessage.Result result_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .ProtoBufRemote.RpcMessage.Call call_message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->call_message(), output);
  }
  
  // optional .ProtoBufRemote.RpcMessage.Result result_message = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result_message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .ProtoBufRemote.RpcMessage.Call call_message = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->call_message(), target);
  }
  
  // optional .ProtoBufRemote.RpcMessage.Result result_message = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result_message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .ProtoBufRemote.RpcMessage.Call call_message = 2;
    if (has_call_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->call_message());
    }
    
    // optional .ProtoBufRemote.RpcMessage.Result result_message = 3;
    if (has_result_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result_message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcMessage::MergeFrom(const RpcMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      mutable_call_message()->::ProtoBufRemote::RpcMessage_Call::MergeFrom(from.call_message());
    }
    if (from._has_bit(2)) {
      mutable_result_message()->::ProtoBufRemote::RpcMessage_Result::MergeFrom(from.result_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMessage::CopyFrom(const RpcMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_call_message()) {
    if (!this->call_message().IsInitialized()) return false;
  }
  return true;
}

void RpcMessage::Swap(RpcMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(call_message_, other->call_message_);
    std::swap(result_message_, other->result_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcMessage_descriptor_;
  metadata.reflection = RpcMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBufRemote

// @@protoc_insertion_point(global_scope)
